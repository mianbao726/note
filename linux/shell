1.hello world
	#!/bin/bash
	echo "hello world"
	
2.read input 
	#!/bin/bash
	echo "what's you name ?"
	read USERNAME
	echo "hello, $USERNAME"
	
3.使用变量
	#!/bin/bash
	username="sunny"
	echo ${username}
	echo $username
	
4.循环
	#!/bin/bash
	for skill in aa bb cc dd
	do
	    echo "I'm good at $skill"
	done
	
5.只读变量
	#!/bin/bash
	url="ssbb"
	readonly url
	url="abc"
		
6.删除变量
	#!/bin/bash
	url="ssbb"
	echo $url
	unset url
	echo $url
		
7.当前脚本pid
	#!/bin/bash
	echo $$
	
8.特殊变量
	#!/bin/bash
	echo $$   #当前pid
	echo $0   #文件名
	echo $2   #第二个参数
	echo $#   #参数个数
	echo $*   #全部参数
	echo $@   #全部参数TODO
	echo $?   #返回值
	echo "---------------------------"
	echo "\$*=" $*
	echo "\"\$*\"=" "$*"
	echo "\$@=" $@
	echo "\"\$@\"=" "$@"
	for var in $*
	do
	  echo "$var"
	done
	
	for var in $@
	do
	  echo "$var"
	done
	
	for var in "$*"
	do
	  echo "$var"
	done
	
	for var in "$@"
	do
	  echo "$var"
	done
	echo $?
		
9.转义字符
	#!/bin/bash
	a=10
	echo -n  "\t13\b\v\fsss"
	echo -e "value is ${a}\n"
	echo "value is ${a} \n"
		
10.获取命令的执行结果
	#!/bin/bash
	date=`date`
	echo "date is ${date}"
	
	user=`who | wc -l`
	echo "current user is $user"
	
11.变量替换、检查、判断
	#!/bin/bash
	echo ${var:-"not seted"}
	echo "1 - value of var is ${var}"
	
	echo ${var:="still not seted ... ..."}
	echo "2 - value of var is ${var}"
	
	unset var
	echo ${var:+"+value"}
	echo "3- value of var is $var"
	
	
	var="prefix"
	echo ${var:+"afterfix"}
	echo "4 - value of var is $var"
	
	echo ${vari:?"print this msg"}
	echo "5 - value is $var"

12.比较
	-eq	检测两个数是否相等，相等返回 true。
	-ne	检测两个数是否相等，不相等返回 true。
	-gt	检测左边的数是否大于右边的，如果是，则返回 true。
	-lt	检测左边的数是否小于右边的，如果是，则返回 true。
	-ge	检测左边的数是否大等于右边的，如果是，则返回 true。
	-le	检测左边的数是否小于等于右边的，如果是，则返回 true。
	
13.布尔运算符
	!	非运算，表达式为 true 则返回 false，否则返回 true。
	-o	或运算，有一个表达式为 true 则返回 true。
	-a	与运算，两个表达式都为 true 才返回 true。
14.字符串运算符
	=	检测两个字符串是否相等，相等返回 true。	[ $a = $b ] 返回 false。
	!=	检测两个字符串是否相等，不相等返回 true。	[ $a != $b ] 返回 true。
	-z	检测字符串长度是否为0，为0返回 true。	[ -z $a ] 返回 false。
	-n	检测字符串长度是否为0，不为0返回 true。	[ -z $a ] 返回 true。
	str	检测字符串是否为空，不为空返回 true。	[ $a ] 返回 true。

	
	#!/bin/bash
	a="abc"
	b="def"
	if [ $b != $a -o $a == $b ]
	then
	  echo " = "
	else
	  echo " != "
	fi
	
	if [ -z $a ]
	then 
	  echo "length = 0 "
	else
	  echo "length > 0 "
	fi
	
	unset a
	
	if [ -n $a ]
	then
	  echo " length == 0"
	else
	  echo " length != 0"
	fi
	
	if [ $a ]
	then 
	  echo " not null"
	else
	  echo "null"
	fi
	
15.文件属性
	-b file	检测文件是否是块设备文件，如果是，则返回 true。	[ -b $file ] 返回 false。
	-c file	检测文件是否是字符设备文件，如果是，则返回 true。	[ -b $file ] 返回 false。
	-d file	检测文件是否是目录，如果是，则返回 true。	[ -d $file ] 返回 false。
	-f file	检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。	[ -f $file ] 返回 true。
	-g file	检测文件是否设置了 SGID 位，如果是，则返回 true。	[ -g $file ] 返回 false。
	-k file	检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。	[ -k $file ] 返回 false。
	-p file	检测文件是否是具名管道，如果是，则返回 true。	[ -p $file ] 返回 false。
	-u file	检测文件是否设置了 SUID 位，如果是，则返回 true。	[ -u $file ] 返回 false。
	-r file	检测文件是否可读，如果是，则返回 true。	[ -r $file ] 返回 true。
	-w file	检测文件是否可写，如果是，则返回 true。	[ -w $file ] 返回 true。
	-x file	检测文件是否可执行，如果是，则返回 true。	[ -x $file ] 返回 true。
	-s file	检测文件是否为空（文件大小是否大于0），不为空返回 true。	[ -s $file ] 返回 true。
	-e file	检测文件（包括目录）是否存在，如果是，则返回 true。	[ -e $file ] 返回 true。
		
16.字符串 方法
	#!/bin/bash
	name="abced"
	echo -e "name is ${#name}"
	echo -e "sub ${name:1:2}"
	echo `expr index "$name" abc`
	echo `expr index $name b`
		
17.数组
	#!/bin/bash
	name[0]="sunny_tail"
	name[1]="zhuwj"
	name[2]="jack"
	echo "get on ${name[1]}"
	echo "show all ${name[*]}"
	echo "show all ${name[@]}"
	name1len=${#name[@]}
	echo "length is  $name1len"
	echo "[0]length is ${#name[0]}"

18.printf  echo 

19.if else
	#!/bin/bash
	a=11
	
	if [ $a == 9 ]
	then
	  echo "9"
	elif [ $a == 10 ]
	then
	  echo "10"
	elif [ $a -eq 11 ]
	then
	  echo "11"
	fi

20.case
	#!/bin/bash
	option="${1}"
	case $option in
	  -f) echo "file name is ${2}"
	      ;;
	  -d) echo "dir  name is ${2}"
	      ;;
	   *) echo "${0}:usage :[-f filename] | [-d directory]"
	      echo "`basename ${0}`:useage :[-f filename] | [-d directory]"
	      exit 1
	      ;;
	esac

21.for
	#!/bin/bash
	for loop in 1 2 3 4 5
	do 
	  echo "value is $loop"
	done
	
	for loop in " a b c d ed"
	do
	  echo "value is $loop"
	done
	
	for loop in ~/*
	do
	  echo "file name $loop"
	done

22.while
	#!/bin/bash
	count=0;
	while [ $count -lt 10 ]
	do
	  count=`expr $count + 1`
	  echo "count is $count"
	done 
	
	echo "use <CRTL+D> to terminate"
	while read film
	do
	  echo "name is $film"
	done

23.until
	#!/bin/bash
	count=0
	until [ ! $count -lt 10 ]
	do
	  count=`expr $count + 1 `
	  echo "$count"
	done

24.